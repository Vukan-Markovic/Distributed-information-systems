version: '2.1'

services:
  player:
    build: microservices/player-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  player-p1:
    build: microservices/player-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  team:
    build: microservices/team-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql2:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  team-p1:
    build: microservices/team-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql2:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  nationality:
    build: microservices/nationality-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql3:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  nationality-p1:
    build: microservices/nationality-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql3:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  league:
    build: microservices/league-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  league-p1:
    build: microservices/league-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  nationalTeam:
    build: microservices/nationalTeam-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  nationalTeam-p1:
    build: microservices/nationalTeam-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  player-composite:
    build: microservices/player-composite-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      rabbitmq:
        condition: service_healthy

  eureka:
    build: spring-cloud/eureka-server
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}

  gateway:
    build: spring-cloud/gateway
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "8443:8443"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}

  auth-server:
    build: spring-cloud/authorization-server
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}

  config-server:
    build: spring-cloud/config-server
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/config-repo:/config-repo

  # $ mongo
  mongodb:
    image: mongo:3.6.9
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "27017:27017"
    command: mongod --smallfiles
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 20s
      timeout: 5s
      retries: 10

  # $ mysql -u root -h127.0.0.1 -p
  mysql1:
    image: mysql:5.7
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "3302:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=league-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 20s
      timeout: 5s
      retries: 10

  mysql2:
    image: mysql:5.7
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "3304:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=team-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 20s
      timeout: 5s
      retries: 10

  mysql3:
    image: mysql:5.7
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=nationality-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 20s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.7.8-management
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 20s
      timeout: 5s
      retries: 10

  zipkin:
    image: openzipkin/zipkin:2.12.9
    mem_limit: 512m
    networks:
      - my-network
    environment:
      - STORAGE_TYPE=mem
      - RABBIT_ADDRESSES=rabbitmq
    ports:
      - 9411:9411
    depends_on:
      rabbitmq:
        condition: service_healthy

networks:
  my-network:
    name: my-network